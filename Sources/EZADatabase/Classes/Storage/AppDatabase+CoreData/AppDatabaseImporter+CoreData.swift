//
//  AppDatabaseImporter+CoreData.swift
//  TempProject
//
//  Created Eugene Software on 11/12/21.
//  Copyright Â© 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import Combine
import CoreData

class CoreDataWriter<ImportedType> {}

extension CoreDataWriter: DatabaseWriterProtocol where ImportedType: CoreDataCompatible {
    
    typealias WriteType = ImportedType
    
    static func deleteEntities(_ entity: WriteType.Type, predicate: NSPredicate?) -> AnyPublisher<Void, Error> {
        
        return Future { promise in
            CoreDataStorageController.shared.delete(WriteType.ManagedType.self, with: predicate) {
                DispatchQueue.main.async {
                    promise(.success(()))
                }
            }
        }
        .setFailureType(to: Error.self)
        .eraseToAnyPublisher()
    }
    
    static func importRemoteList(_ objectsToImport: [WriteType?]) -> AnyPublisher<Void, Error> {
        
        return Future { promise in
            CoreDataStorageController.shared.insertList(objects: objectsToImport) {
                DispatchQueue.main.async {
                    promise(.success(()))
                }
            }
        }
        .setFailureType(to: Error.self)
        .eraseToAnyPublisher()
    }
    
    static func updateRemote(_ objectToImport: WriteType?, predicate: NSPredicate?) -> AnyPublisher<Void, Error> {
        
        return Future { promise in
            CoreDataStorageController.shared.insertAsync(object: objectToImport, predicate: predicate) {
                DispatchQueue.main.async {
                    promise(.success(()))
                }
            }
        }
        .setFailureType(to: Error.self)
        .eraseToAnyPublisher()
    }
    
    static func importValues(_ entity: WriteType.Type, predicate: NSPredicate?, values:  [String: Any]) -> AnyPublisher<Void, Error>  {
        
        return Future { promise in
            CoreDataStorageController.shared.setValues(type: entity, values: values, predicate: predicate) {
                DispatchQueue.main.async {
                    promise(.success(()))
                }
            }
        }
        .setFailureType(to: Error.self)
        .eraseToAnyPublisher()
    }
}

